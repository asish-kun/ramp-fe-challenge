{"ast":null,"code":"var _jsxFileName = \"/Users/mickey/Downloads/ramp-fe-challenge/src/components/Transactions/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"src/hooks/useCustomFetch\";\nimport { TransactionPane } from \"./TransactionPane\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Transactions = _ref => {\n  _s();\n\n  let {\n    transactions: initialTransactions\n  } = _ref;\n  const {\n    fetchWithoutCache\n  } = useCustomFetch();\n  const [loadingTransactions, setLoadingTransactions] = useState({});\n  const [transactions, setTransactions] = useState(initialTransactions);\n  const setTransactionApproval = useCallback(async _ref2 => {\n    let {\n      transactionId,\n      newValue\n    } = _ref2;\n    setLoadingTransactions(prev => ({ ...prev,\n      [transactionId]: true\n    }));\n\n    try {\n      await fetchWithoutCache(\"setTransactionApproval\", {\n        transactionId,\n        value: newValue\n      });\n      setTransactions(prevTransactions => prevTransactions.map(transaction => transaction.id === transactionId ? { ...transaction,\n        approved: newValue\n      } : transaction));\n    } finally {\n      setLoadingTransactions(prev => ({ ...prev,\n        [transactionId]: false\n      }));\n    }\n  }, [fetchWithoutCache]);\n\n  if (transactions === null) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"RampLoading--container\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    \"data-testid\": \"transaction-container\",\n    children: transactions.map(transaction => /*#__PURE__*/_jsxDEV(TransactionPane, {\n      transaction: transaction,\n      loading: loadingTransactions[transaction.id] || false,\n      setTransactionApproval: setTransactionApproval\n    }, transaction.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Transactions, \"N+cYolADKp1LOF8fa64ZIapkDb0=\", false, function () {\n  return [useCustomFetch];\n});\n\n_c = Transactions;\n\nvar _c;\n\n$RefreshReg$(_c, \"Transactions\");","map":{"version":3,"names":["useCallback","useState","useCustomFetch","TransactionPane","Transactions","transactions","initialTransactions","fetchWithoutCache","loadingTransactions","setLoadingTransactions","setTransactions","setTransactionApproval","transactionId","newValue","prev","value","prevTransactions","map","transaction","id","approved"],"sources":["/Users/mickey/Downloads/ramp-fe-challenge/src/components/Transactions/index.tsx"],"sourcesContent":["import { useCallback, useState } from \"react\"\nimport { useCustomFetch } from \"src/hooks/useCustomFetch\"\nimport { SetTransactionApprovalParams, Transaction } from \"src/utils/types\"\nimport { TransactionPane } from \"./TransactionPane\"\nimport { SetTransactionApprovalFunction, TransactionsComponent } from \"./types\"\n\nexport const Transactions: TransactionsComponent = ({ transactions: initialTransactions }) => {\n  const { fetchWithoutCache } = useCustomFetch()\n  const [loadingTransactions, setLoadingTransactions] = useState<Record<string, boolean>>({})\n  const [transactions, setTransactions] = useState<Transaction[]>(initialTransactions)\n\n  const setTransactionApproval = useCallback<SetTransactionApprovalFunction>(\n    async ({ transactionId, newValue }) => {\n      setLoadingTransactions((prev) => ({ ...prev, [transactionId]: true }))\n\n      try {\n        await fetchWithoutCache<void, SetTransactionApprovalParams>(\"setTransactionApproval\", {\n          transactionId,\n          value: newValue,\n        })\n\n        setTransactions((prevTransactions) =>\n          prevTransactions.map((transaction) =>\n            transaction.id === transactionId\n              ? { ...transaction, approved: newValue }\n              : transaction\n          )\n        )\n      } finally {\n        setLoadingTransactions((prev) => ({ ...prev, [transactionId]: false }))\n      }\n    },\n    [fetchWithoutCache]\n  )\n\n  if (transactions === null) {\n    return <div className=\"RampLoading--container\">Loading...</div>\n  }\n\n  return (\n    <div data-testid=\"transaction-container\">\n      {transactions.map((transaction) => (\n        <TransactionPane\n          key={transaction.id}\n          transaction={transaction}\n          loading={loadingTransactions[transaction.id] || false}\n          setTransactionApproval={setTransactionApproval}\n        />\n      ))}\n    </div>\n  )\n}\n"],"mappings":";;;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AACA,SAASC,cAAT,QAA+B,0BAA/B;AAEA,SAASC,eAAT,QAAgC,mBAAhC;;AAGA,OAAO,MAAMC,YAAmC,GAAG,QAA2C;EAAA;;EAAA,IAA1C;IAAEC,YAAY,EAAEC;EAAhB,CAA0C;EAC5F,MAAM;IAAEC;EAAF,IAAwBL,cAAc,EAA5C;EACA,MAAM,CAACM,mBAAD,EAAsBC,sBAAtB,IAAgDR,QAAQ,CAA0B,EAA1B,CAA9D;EACA,MAAM,CAACI,YAAD,EAAeK,eAAf,IAAkCT,QAAQ,CAAgBK,mBAAhB,CAAhD;EAEA,MAAMK,sBAAsB,GAAGX,WAAW,CACxC,eAAuC;IAAA,IAAhC;MAAEY,aAAF;MAAiBC;IAAjB,CAAgC;IACrCJ,sBAAsB,CAAEK,IAAD,KAAW,EAAE,GAAGA,IAAL;MAAW,CAACF,aAAD,GAAiB;IAA5B,CAAX,CAAD,CAAtB;;IAEA,IAAI;MACF,MAAML,iBAAiB,CAAqC,wBAArC,EAA+D;QACpFK,aADoF;QAEpFG,KAAK,EAAEF;MAF6E,CAA/D,CAAvB;MAKAH,eAAe,CAAEM,gBAAD,IACdA,gBAAgB,CAACC,GAAjB,CAAsBC,WAAD,IACnBA,WAAW,CAACC,EAAZ,KAAmBP,aAAnB,GACI,EAAE,GAAGM,WAAL;QAAkBE,QAAQ,EAAEP;MAA5B,CADJ,GAEIK,WAHN,CADa,CAAf;IAOD,CAbD,SAaU;MACRT,sBAAsB,CAAEK,IAAD,KAAW,EAAE,GAAGA,IAAL;QAAW,CAACF,aAAD,GAAiB;MAA5B,CAAX,CAAD,CAAtB;IACD;EACF,CApBuC,EAqBxC,CAACL,iBAAD,CArBwC,CAA1C;;EAwBA,IAAIF,YAAY,KAAK,IAArB,EAA2B;IACzB,oBAAO;MAAK,SAAS,EAAC,wBAAf;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAP;EACD;;EAED,oBACE;IAAK,eAAY,uBAAjB;IAAA,UACGA,YAAY,CAACY,GAAb,CAAkBC,WAAD,iBAChB,QAAC,eAAD;MAEE,WAAW,EAAEA,WAFf;MAGE,OAAO,EAAEV,mBAAmB,CAACU,WAAW,CAACC,EAAb,CAAnB,IAAuC,KAHlD;MAIE,sBAAsB,EAAER;IAJ1B,GACOO,WAAW,CAACC,EADnB;MAAA;MAAA;MAAA;IAAA,QADD;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAYD,CA7CM;;GAAMf,Y;UACmBF,c;;;KADnBE,Y"},"metadata":{},"sourceType":"module"}