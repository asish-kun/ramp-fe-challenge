{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function useTransactionsByEmployee() {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [transactionsByEmployee, setTransactionsByEmployee] = useState(null);\n  const fetchById = useCallback(async employeeId => {\n    const data = await fetchWithCache(\"transactionsByEmployee\", {\n      employeeId\n    });\n    setTransactionsByEmployee(data);\n  }, [fetchWithCache]);\n  const updateTransaction = useCallback((transactionId, newApprovalStatus) => {\n    setTransactionsByEmployee(prevTransactions => (prevTransactions === null || prevTransactions === void 0 ? void 0 : prevTransactions.map(transaction => transaction.id === transactionId ? { ...transaction,\n      approved: newApprovalStatus\n    } : transaction)) || null);\n  }, []);\n  return {\n    data: transactionsByEmployee,\n    loading,\n    fetchById,\n    updateTransaction\n  };\n}\n\n_s(useTransactionsByEmployee, \"1H7bfmAgSssKmfoj63UXXOLR4j0=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","useTransactionsByEmployee","fetchWithCache","loading","transactionsByEmployee","setTransactionsByEmployee","fetchById","employeeId","data","updateTransaction","transactionId","newApprovalStatus","prevTransactions","map","transaction","id","approved"],"sources":["/Users/mickey/Downloads/ramp-fe-challenge/src/hooks/useTransactionsByEmployee.ts"],"sourcesContent":["import { useCallback, useState } from \"react\"\nimport { RequestByEmployeeParams, Transaction } from \"../utils/types\"\nimport { TransactionsByEmployeeResult } from \"./types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\n\nexport function useTransactionsByEmployee() {\n  const { fetchWithCache, loading } = useCustomFetch()\n  const [transactionsByEmployee, setTransactionsByEmployee] = useState<Transaction[] | null>(null)\n\n  const fetchById = useCallback(\n    async (employeeId: string) => {\n      const data = await fetchWithCache<Transaction[], RequestByEmployeeParams>(\n        \"transactionsByEmployee\",\n        { employeeId }\n      )\n      setTransactionsByEmployee(data)\n    },\n    [fetchWithCache]\n  )\n\n  const updateTransaction = useCallback(\n    (transactionId: string, newApprovalStatus: boolean) => {\n      setTransactionsByEmployee((prevTransactions) =>\n        prevTransactions?.map((transaction) =>\n          transaction.id === transactionId\n            ? { ...transaction, approved: newApprovalStatus }\n            : transaction\n        ) || null\n      )\n    },\n    []\n  )\n\n  return {\n    data: transactionsByEmployee,\n    loading,\n    fetchById,\n    updateTransaction\n  }\n}\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAGA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,SAASC,yBAAT,GAAqC;EAAA;;EAC1C,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BH,cAAc,EAAlD;EACA,MAAM,CAACI,sBAAD,EAAyBC,yBAAzB,IAAsDN,QAAQ,CAAuB,IAAvB,CAApE;EAEA,MAAMO,SAAS,GAAGR,WAAW,CAC3B,MAAOS,UAAP,IAA8B;IAC5B,MAAMC,IAAI,GAAG,MAAMN,cAAc,CAC/B,wBAD+B,EAE/B;MAAEK;IAAF,CAF+B,CAAjC;IAIAF,yBAAyB,CAACG,IAAD,CAAzB;EACD,CAP0B,EAQ3B,CAACN,cAAD,CAR2B,CAA7B;EAWA,MAAMO,iBAAiB,GAAGX,WAAW,CACnC,CAACY,aAAD,EAAwBC,iBAAxB,KAAuD;IACrDN,yBAAyB,CAAEO,gBAAD,IACxB,CAAAA,gBAAgB,SAAhB,IAAAA,gBAAgB,WAAhB,YAAAA,gBAAgB,CAAEC,GAAlB,CAAuBC,WAAD,IACpBA,WAAW,CAACC,EAAZ,KAAmBL,aAAnB,GACI,EAAE,GAAGI,WAAL;MAAkBE,QAAQ,EAAEL;IAA5B,CADJ,GAEIG,WAHN,MAIK,IALkB,CAAzB;EAOD,CATkC,EAUnC,EAVmC,CAArC;EAaA,OAAO;IACLN,IAAI,EAAEJ,sBADD;IAELD,OAFK;IAGLG,SAHK;IAILG;EAJK,CAAP;AAMD;;GAlCeR,yB;UACsBD,c"},"metadata":{},"sourceType":"module"}